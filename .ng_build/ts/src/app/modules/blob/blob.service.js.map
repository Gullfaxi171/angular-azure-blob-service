{"version":3,"sources":["blob.service.ts"],"names":[],"mappings":"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","file":"blob.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport { UploadParams } from './definitions';\nexport class BlobService {\n  static DefaultBlockSize = 1024 * 32;\n/**\n * @param {?} http\n */\nconstructor (private http: Http) { }\n/**\n * @param {?} params\n * @param {?} filename\n * @return {?}\n */\ngenerateBlobUrl (params: UploadParams, filename: string) {\n    return 'https://' + params.storageAccount + '.blob.core.windows.net/' + params.containerName + '/' + filename;\n  }\n/**\n * @param {?} reader\n * @param {?} state\n * @return {?}\n */\nprivate uploadFileInBlocks (reader, state) {\n      if (!state.cancelled) {\n          if (state.totalBytesRemaining > 0) {\n              const /** @type {?} */ fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize);\n              const /** @type {?} */ blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6);\n              state.blockIds.push(btoa(blockId));\n              reader.readAsArrayBuffer(fileContent);\n              state.currentFilePointer += state.maxBlockSize;\n              state.totalBytesRemaining -= state.maxBlockSize;\n              if (state.totalBytesRemaining < state.maxBlockSize) {\n                  state.maxBlockSize = state.totalBytesRemaining;\n              }\n          } else {\n              this.commitBlockList(state);\n          }\n      }\n  }\n/**\n * @param {?} state\n * @return {?}\n */\nprivate commitBlockList (state) {\n      const /** @type {?} */ uri = state.fileUrl + '&comp=blocklist';\n      const /** @type {?} */ headers = new Headers({'x-ms-blob-content-type': state.file.type });\n      const /** @type {?} */ options = new RequestOptions({ headers: headers });\n      let /** @type {?} */ requestBody = '<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?><BlockList>';\n      for (let /** @type {?} */ i = 0; i < state.blockIds.length; i++) {\n          requestBody += '<Latest>' + state.blockIds[i] + '</Latest>';\n      }\n      requestBody += '</BlockList>';\n\n      this.http.put(uri, requestBody, options)\n        // .map(res => res.json())\n        .subscribe(elem => {\n          if (state.complete) {\n            state.complete();\n          }\n        }, err => {\n          if (state.error) {\n            state.error();\n          }\n        });\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate initializeState (config) {\n      let /** @type {?} */ blockSize = BlobService.DefaultBlockSize;\n      if (config.blockSize) {\n        blockSize = config.blockSize;\n      }\n      let /** @type {?} */ maxBlockSize = blockSize;\n      let /** @type {?} */ numberOfBlocks = 1;\n      const /** @type {?} */ file = config.file;\n      const /** @type {?} */ fileSize = file.size;\n      if (fileSize < blockSize) {\n          maxBlockSize = fileSize;\n      }\n      if (fileSize % maxBlockSize === 0) {\n          numberOfBlocks = fileSize / maxBlockSize;\n      } else {\n          numberOfBlocks = fileSize / maxBlockSize + 1;\n      }\n\n      return {\n          maxBlockSize: maxBlockSize, // Each file will be split in 256 KB.\n          numberOfBlocks: numberOfBlocks,\n          totalBytesRemaining: fileSize,\n          currentFilePointer: 0,\n          blockIds: new Array(),\n          blockIdPrefix: 'block-',\n          bytesUploaded: 0,\n          submitUri: null,\n          file: file,\n          baseUrl: config.baseUrl,\n          sasToken: config.sasToken,\n          fileUrl: config.baseUrl + config.sasToken,\n          progress: config.progress,\n          complete: config.complete,\n          error: config.error,\n          cancelled: false\n      };\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nupload (config) {\n    const /** @type {?} */ state = this.initializeState(config);\n    const /** @type {?} */ reader = new FileReader();\n    reader.onloadend = (evt: any) => {\n      if (evt.target.readyState === 2 && !state.cancelled) {\n        const /** @type {?} */ uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1];\n        const /** @type {?} */ requestData = evt.target.result;\n        const /** @type {?} */ requestData2 = new Uint8Array(evt.target.result);\n        const /** @type {?} */ headers = new Headers({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' });\n        const /** @type {?} */ options = new RequestOptions({ headers: headers });\n        // console.log(uri);\n        this.http.put(uri, requestData, options)\n          // .map(res => res.json())\n          .subscribe(elem => {\n            state.bytesUploaded += requestData2.length;\n            const /** @type {?} */ percentComplete = ((state.bytesUploaded / state.file.size) * 100).toFixed(2);\n            if (state.progress) {\n              state.progress(percentComplete, elem);\n            }\n\n            this.uploadFileInBlocks(reader, state);\n          }, err => {\n            if (state.error) {\n              state.error();\n            }\n          });\n          }\n      };\n\n      this.uploadFileInBlocks(reader, state);\n\n      return {\n          cancel: () => {\n              state.cancelled = true;\n          }\n      };\n  }\n/**\n * @param {?} number\n * @param {?} length\n * @return {?}\n */\nprivate prependZeros (number, length) {\n    let /** @type {?} */ str = '' + number;\n    while (str.length < length) {\n      str = '0' + str;\n    }\n    return str;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction BlobService_tsickle_Closure_declarations() {\n/** @type {?} */\nBlobService.DefaultBlockSize;\n/** @type {?} */\nBlobService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBlobService.ctorParameters;\n/** @type {?} */\nBlobService.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
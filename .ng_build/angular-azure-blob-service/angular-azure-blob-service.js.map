{"version":3,"file":"angular-azure-blob-service.js","sources":["../ts/angular-azure-blob-service.ts","../ts/src/app/modules/blob/blob.module.ts","../ts/src/app/modules/blob/blob.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BlobService,UploadConfig,UploadParams,BlobModule} from './public_api';\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpModule } from '@angular/http';\n\nimport { BlobService } from './blob.service';\nexport class BlobModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BlobModule,\n      providers: [\n        BlobService\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    HttpModule\n  ],\n  declarations: [],\n  exports: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BlobModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBlobModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBlobModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport { UploadParams } from './definitions';\nexport class BlobService {\n  static DefaultBlockSize = 1024 * 32;\n/**\n * @param {?} http\n */\nconstructor (private http: Http) { }\n/**\n * @param {?} params\n * @param {?} filename\n * @return {?}\n */\ngenerateBlobUrl (params: UploadParams, filename: string) {\n    return 'https://' + params.storageAccount + '.blob.core.windows.net/' + params.containerName + '/' + filename;\n  }\n/**\n * @param {?} reader\n * @param {?} state\n * @return {?}\n */\nprivate uploadFileInBlocks (reader, state) {\n      if (!state.cancelled) {\n          if (state.totalBytesRemaining > 0) {\n              const /** @type {?} */ fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize);\n              const /** @type {?} */ blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6);\n              state.blockIds.push(btoa(blockId));\n              reader.readAsArrayBuffer(fileContent);\n              state.currentFilePointer += state.maxBlockSize;\n              state.totalBytesRemaining -= state.maxBlockSize;\n              if (state.totalBytesRemaining < state.maxBlockSize) {\n                  state.maxBlockSize = state.totalBytesRemaining;\n              }\n          } else {\n              this.commitBlockList(state);\n          }\n      }\n  }\n/**\n * @param {?} state\n * @return {?}\n */\nprivate commitBlockList (state) {\n      const /** @type {?} */ uri = state.fileUrl + '&comp=blocklist';\n      const /** @type {?} */ headers = new Headers({'x-ms-blob-content-type': state.file.type });\n      const /** @type {?} */ options = new RequestOptions({ headers: headers });\n      let /** @type {?} */ requestBody = '<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?><BlockList>';\n      for (let /** @type {?} */ i = 0; i < state.blockIds.length; i++) {\n          requestBody += '<Latest>' + state.blockIds[i] + '</Latest>';\n      }\n      requestBody += '</BlockList>';\n\n      this.http.put(uri, requestBody, options)\n        // .map(res => res.json())\n        .subscribe(elem => {\n          if (state.complete) {\n            state.complete();\n          }\n        }, err => {\n          if (state.error) {\n            state.error();\n          }\n        });\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate initializeState (config) {\n      let /** @type {?} */ blockSize = BlobService.DefaultBlockSize;\n      if (config.blockSize) {\n        blockSize = config.blockSize;\n      }\n      let /** @type {?} */ maxBlockSize = blockSize;\n      let /** @type {?} */ numberOfBlocks = 1;\n      const /** @type {?} */ file = config.file;\n      const /** @type {?} */ fileSize = file.size;\n      if (fileSize < blockSize) {\n          maxBlockSize = fileSize;\n      }\n      if (fileSize % maxBlockSize === 0) {\n          numberOfBlocks = fileSize / maxBlockSize;\n      } else {\n          numberOfBlocks = fileSize / maxBlockSize + 1;\n      }\n\n      return {\n          maxBlockSize: maxBlockSize, // Each file will be split in 256 KB.\n          numberOfBlocks: numberOfBlocks,\n          totalBytesRemaining: fileSize,\n          currentFilePointer: 0,\n          blockIds: new Array(),\n          blockIdPrefix: 'block-',\n          bytesUploaded: 0,\n          submitUri: null,\n          file: file,\n          baseUrl: config.baseUrl,\n          sasToken: config.sasToken,\n          fileUrl: config.baseUrl + config.sasToken,\n          progress: config.progress,\n          complete: config.complete,\n          error: config.error,\n          cancelled: false\n      };\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nupload (config) {\n    const /** @type {?} */ state = this.initializeState(config);\n    const /** @type {?} */ reader = new FileReader();\n    reader.onloadend = (evt: any) => {\n      if (evt.target.readyState === 2 && !state.cancelled) {\n        const /** @type {?} */ uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1];\n        const /** @type {?} */ requestData = evt.target.result;\n        const /** @type {?} */ requestData2 = new Uint8Array(evt.target.result);\n        const /** @type {?} */ headers = new Headers({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' });\n        const /** @type {?} */ options = new RequestOptions({ headers: headers });\n        // console.log(uri);\n        this.http.put(uri, requestData, options)\n          // .map(res => res.json())\n          .subscribe(elem => {\n            state.bytesUploaded += requestData2.length;\n            const /** @type {?} */ percentComplete = ((state.bytesUploaded / state.file.size) * 100).toFixed(2);\n            if (state.progress) {\n              state.progress(percentComplete, elem);\n            }\n\n            this.uploadFileInBlocks(reader, state);\n          }, err => {\n            if (state.error) {\n              state.error();\n            }\n          });\n          }\n      };\n\n      this.uploadFileInBlocks(reader, state);\n\n      return {\n          cancel: () => {\n              state.cancelled = true;\n          }\n      };\n  }\n/**\n * @param {?} number\n * @param {?} length\n * @return {?}\n */\nprivate prependZeros (number, length) {\n    let /** @type {?} */ str = '' + number;\n    while (str.length < length) {\n      str = '0' + str;\n    }\n    return str;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction BlobService_tsickle_Closure_declarations() {\n/** @type {?} */\nBlobService.DefaultBlockSize;\n/** @type {?} */\nBlobService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBlobService.ctorParameters;\n/** @type {?} */\nBlobService.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["http"],"mappings":"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"}
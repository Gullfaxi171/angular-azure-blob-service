{"version":3,"file":"angular-azure-blob-service.es5.js","sources":["../ts/angular-azure-blob-service.ts","../ts/src/app/modules/blob/blob.module.ts","../ts/src/app/modules/blob/blob.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BlobService,UploadConfig,UploadParams,BlobModule} from './public_api';\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpModule } from '@angular/http';\n\nimport { BlobService } from './blob.service';\nexport class BlobModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BlobModule,\n      providers: [\n        BlobService\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    HttpModule\n  ],\n  declarations: [],\n  exports: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BlobModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBlobModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBlobModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport { UploadParams } from './definitions';\nexport class BlobService {\n  static DefaultBlockSize = 1024 * 32;\n/**\n * @param {?} http\n */\nconstructor (private http: Http) { }\n/**\n * @param {?} params\n * @param {?} filename\n * @return {?}\n */\ngenerateBlobUrl (params: UploadParams, filename: string) {\n    return 'https://' + params.storageAccount + '.blob.core.windows.net/' + params.containerName + '/' + filename;\n  }\n/**\n * @param {?} reader\n * @param {?} state\n * @return {?}\n */\nprivate uploadFileInBlocks (reader, state) {\n      if (!state.cancelled) {\n          if (state.totalBytesRemaining > 0) {\n              const /** @type {?} */ fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize);\n              const /** @type {?} */ blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6);\n              state.blockIds.push(btoa(blockId));\n              reader.readAsArrayBuffer(fileContent);\n              state.currentFilePointer += state.maxBlockSize;\n              state.totalBytesRemaining -= state.maxBlockSize;\n              if (state.totalBytesRemaining < state.maxBlockSize) {\n                  state.maxBlockSize = state.totalBytesRemaining;\n              }\n          } else {\n              this.commitBlockList(state);\n          }\n      }\n  }\n/**\n * @param {?} state\n * @return {?}\n */\nprivate commitBlockList (state) {\n      const /** @type {?} */ uri = state.fileUrl + '&comp=blocklist';\n      const /** @type {?} */ headers = new Headers({'x-ms-blob-content-type': state.file.type });\n      const /** @type {?} */ options = new RequestOptions({ headers: headers });\n      let /** @type {?} */ requestBody = '<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?><BlockList>';\n      for (let /** @type {?} */ i = 0; i < state.blockIds.length; i++) {\n          requestBody += '<Latest>' + state.blockIds[i] + '</Latest>';\n      }\n      requestBody += '</BlockList>';\n\n      this.http.put(uri, requestBody, options)\n        // .map(res => res.json())\n        .subscribe(elem => {\n          if (state.complete) {\n            state.complete();\n          }\n        }, err => {\n          if (state.error) {\n            state.error();\n          }\n        });\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate initializeState (config) {\n      let /** @type {?} */ blockSize = BlobService.DefaultBlockSize;\n      if (config.blockSize) {\n        blockSize = config.blockSize;\n      }\n      let /** @type {?} */ maxBlockSize = blockSize;\n      let /** @type {?} */ numberOfBlocks = 1;\n      const /** @type {?} */ file = config.file;\n      const /** @type {?} */ fileSize = file.size;\n      if (fileSize < blockSize) {\n          maxBlockSize = fileSize;\n      }\n      if (fileSize % maxBlockSize === 0) {\n          numberOfBlocks = fileSize / maxBlockSize;\n      } else {\n          numberOfBlocks = fileSize / maxBlockSize + 1;\n      }\n\n      return {\n          maxBlockSize: maxBlockSize, // Each file will be split in 256 KB.\n          numberOfBlocks: numberOfBlocks,\n          totalBytesRemaining: fileSize,\n          currentFilePointer: 0,\n          blockIds: new Array(),\n          blockIdPrefix: 'block-',\n          bytesUploaded: 0,\n          submitUri: null,\n          file: file,\n          baseUrl: config.baseUrl,\n          sasToken: config.sasToken,\n          fileUrl: config.baseUrl + config.sasToken,\n          progress: config.progress,\n          complete: config.complete,\n          error: config.error,\n          cancelled: false\n      };\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nupload (config) {\n    const /** @type {?} */ state = this.initializeState(config);\n    const /** @type {?} */ reader = new FileReader();\n    reader.onloadend = (evt: any) => {\n      if (evt.target.readyState === 2 && !state.cancelled) {\n        const /** @type {?} */ uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1];\n        const /** @type {?} */ requestData = evt.target.result;\n        const /** @type {?} */ requestData2 = new Uint8Array(evt.target.result);\n        const /** @type {?} */ headers = new Headers({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' });\n        const /** @type {?} */ options = new RequestOptions({ headers: headers });\n        // console.log(uri);\n        this.http.put(uri, requestData, options)\n          // .map(res => res.json())\n          .subscribe(elem => {\n            state.bytesUploaded += requestData2.length;\n            const /** @type {?} */ percentComplete = ((state.bytesUploaded / state.file.size) * 100).toFixed(2);\n            if (state.progress) {\n              state.progress(percentComplete, elem);\n            }\n\n            this.uploadFileInBlocks(reader, state);\n          }, err => {\n            if (state.error) {\n              state.error();\n            }\n          });\n          }\n      };\n\n      this.uploadFileInBlocks(reader, state);\n\n      return {\n          cancel: () => {\n              state.cancelled = true;\n          }\n      };\n  }\n/**\n * @param {?} number\n * @param {?} length\n * @return {?}\n */\nprivate prependZeros (number, length) {\n    let /** @type {?} */ str = '' + number;\n    while (str.length < length) {\n      str = '0' + str;\n    }\n    return str;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\n\nfunction BlobService_tsickle_Closure_declarations() {\n/** @type {?} */\nBlobService.DefaultBlockSize;\n/** @type {?} */\nBlobService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBlobService.ctorParameters;\n/** @type {?} */\nBlobService.prototype.http;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["http"],"mappings":"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"}